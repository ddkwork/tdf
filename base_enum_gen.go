package tdf

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type BaseKind byte

const (
	IntegerKind BaseKind = iota
	StringKind
	BlobKind
	StructKind
	ListKind
	DictionaryKind
	UnionKind
	IntegerListKind
	IntVector2Kind
	IntVector3Kind
	UnknownKind
	InvalidBaseKind
)

func ConvertInteger2BaseKind[T constraints.Integer](v T) BaseKind {
	return BaseKind(v)
}

func (k BaseKind) AssertKind(kinds string) BaseKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidBaseKind
}

func (k BaseKind) String() string {
	switch k {
	case IntegerKind:
		return "Integer"
	case StringKind:
		return "String"
	case BlobKind:
		return "Blob"
	case StructKind:
		return "Struct"
	case ListKind:
		return "List"
	case DictionaryKind:
		return "Dictionary"
	case UnionKind:
		return "Union"
	case IntegerListKind:
		return "IntegerList"
	case IntVector2Kind:
		return "IntVector2"
	case IntVector3Kind:
		return "IntVector3"
	case UnknownKind:
		return "Unknown"
	default:
		return "InvalidBaseKind"
	}
}

func (k BaseKind) Keys() []string {
	return []string{
		"Integer",
		"String",
		"Blob",
		"Struct",
		"List",
		"Dictionary",
		"Union",
		"IntegerList",
		"IntVector2",
		"IntVector3",
		"Unknown",
	}
}

func (k BaseKind) Kinds() []BaseKind {
	return []BaseKind{
		IntegerKind,
		StringKind,
		BlobKind,
		StructKind,
		ListKind,
		DictionaryKind,
		UnionKind,
		IntegerListKind,
		IntVector2Kind,
		IntVector3Kind,
		UnknownKind,
	}
}

func (k BaseKind) PngFileName() string {
	switch k {
	case IntegerKind:
		return "Integer"
	case StringKind:
		return "String"
	case BlobKind:
		return "Blob"
	case StructKind:
		return "Struct"
	case ListKind:
		return "List"
	case DictionaryKind:
		return "Dictionary"
	case UnionKind:
		return "Union"
	case IntegerListKind:
		return "IntegerList"
	case IntVector2Kind:
		return "IntVector2"
	case IntVector3Kind:
		return "IntVector3"
	case UnknownKind:
		return "Unknown"
	default:
		return "InvalidBaseKind"
	}
}
