package tdf

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type BaseKind byte

const (
	IntegerKind BaseKind = iota
	StringKind
	BinaryKind
	StructKind
	ListKind
	MapKind
	UnionKind
	VariableKind
	BlazeObjectTypeKind
	BlazeObjectIdKind
	FloatKind
	TimeValueKind
	MaxKind
	InvalidBaseKind
)

func ConvertInteger2BaseKind[T constraints.Integer](v T) BaseKind {
	return BaseKind(v)
}

func (k BaseKind) AssertKind(kinds string) BaseKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidBaseKind
}

func (k BaseKind) String() string {
	switch k {
	case IntegerKind:
		return "Integer"
	case StringKind:
		return "String"
	case BinaryKind:
		return "Binary"
	case StructKind:
		return "Struct"
	case ListKind:
		return "List"
	case MapKind:
		return "Map"
	case UnionKind:
		return "Union"
	case VariableKind:
		return "Variable"
	case BlazeObjectTypeKind:
		return "BlazeObjectType"
	case BlazeObjectIdKind:
		return "BlazeObjectId"
	case FloatKind:
		return "Float"
	case TimeValueKind:
		return "TimeValue"
	case MaxKind:
		return "Max"
	default:
		return "InvalidBaseKind"
	}
}

func (k BaseKind) Keys() []string {
	return []string{
		"Integer",
		"String",
		"Binary",
		"Struct",
		"List",
		"Map",
		"Union",
		"Variable",
		"BlazeObjectType",
		"BlazeObjectId",
		"Float",
		"TimeValue",
		"Max",
	}
}

func (k BaseKind) Kinds() []BaseKind {
	return []BaseKind{
		IntegerKind,
		StringKind,
		BinaryKind,
		StructKind,
		ListKind,
		MapKind,
		UnionKind,
		VariableKind,
		BlazeObjectTypeKind,
		BlazeObjectIdKind,
		FloatKind,
		TimeValueKind,
		MaxKind,
	}
}

func (k BaseKind) PngFileName() string {
	switch k {
	case IntegerKind:
		return "Integer"
	case StringKind:
		return "String"
	case BinaryKind:
		return "Binary"
	case StructKind:
		return "Struct"
	case ListKind:
		return "List"
	case MapKind:
		return "Map"
	case UnionKind:
		return "Union"
	case VariableKind:
		return "Variable"
	case BlazeObjectTypeKind:
		return "BlazeObjectType"
	case BlazeObjectIdKind:
		return "BlazeObjectId"
	case FloatKind:
		return "Float"
	case TimeValueKind:
		return "TimeValue"
	case MaxKind:
		return "Max"
	default:
		return "InvalidBaseKind"
	}
}
