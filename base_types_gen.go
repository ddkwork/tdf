package tdf

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile types - DO NOT EDIT.

type BaseType byte

const (
	IntegerType BaseType = iota
	StringType
	BinaryType
	StructType
	ListType
	MapType
	UnionType
	VariableType
	BlazeObjectTypeType
	BlazeObjectIdType
	FloatType
	TimeValueType
	MaxType
	InvalidBaseType
)

func ConvertInteger2BaseType[T constraints.Integer](v T) BaseType {
	return BaseType(v)
}

func (t BaseType) AssertType(Types string) BaseType {
	for _, Type := range t.Types() {
		if strings.ToLower(Types) == strings.ToLower(Type.String()) {
			return Type
		}
	}
	return InvalidBaseType
}

func (t BaseType) String() string {
	switch t {
	case IntegerType:
		return "Integer"
	case StringType:
		return "String"
	case BinaryType:
		return "Binary"
	case StructType:
		return "Struct"
	case ListType:
		return "List"
	case MapType:
		return "Map"
	case UnionType:
		return "Union"
	case VariableType:
		return "Variable"
	case BlazeObjectTypeType:
		return "BlazeObjectType"
	case BlazeObjectIdType:
		return "BlazeObjectId"
	case FloatType:
		return "Float"
	case TimeValueType:
		return "TimeValue"
	case MaxType:
		return "Max"
	default:
		return "InvalidBaseType"
	}
}

func (t BaseType) Tooltip() string {
	switch t {
	case IntegerType:
		return "int8,int16,int32,int64,uint8,uint16,uint32,uint64"
	case StringType:
		return "string"
	case BinaryType:
		return "[]byte"
	case StructType:
		return "TDFStruct"
	case ListType:
		return "[]any"
	case MapType:
		return "map[any]any"
	case UnionType:
		return "Union"
	case VariableType:
		return "Variable"
	case BlazeObjectTypeType:
		return "BlazeObjectType"
	case BlazeObjectIdType:
		return "BlazeObjectID"
	case FloatType:
		return "float32,float64"
	case TimeValueType:
		return "time.Time"
	case MaxType:
		return "must less it"
	default:
		return "InvalidBaseType"
	}
}

func (t BaseType) Names() []string {
	return []string{
		"Integer",
		"String",
		"Binary",
		"Struct",
		"List",
		"Map",
		"Union",
		"Variable",
		"BlazeObjectType",
		"BlazeObjectId",
		"Float",
		"TimeValue",
		"Max",
	}
}

func (t BaseType) Types() []BaseType {
	return []BaseType{
		IntegerType,
		StringType,
		BinaryType,
		StructType,
		ListType,
		MapType,
		UnionType,
		VariableType,
		BlazeObjectTypeType,
		BlazeObjectIdType,
		FloatType,
		TimeValueType,
		MaxType,
	}
}

func (t BaseType) SvgFileName() string {
	switch t {
	case IntegerType:
		return "Integer"
	case StringType:
		return "String"
	case BinaryType:
		return "Binary"
	case StructType:
		return "Struct"
	case ListType:
		return "List"
	case MapType:
		return "Map"
	case UnionType:
		return "Union"
	case VariableType:
		return "Variable"
	case BlazeObjectTypeType:
		return "BlazeObjectType"
	case BlazeObjectIdType:
		return "BlazeObjectId"
	case FloatType:
		return "Float"
	case TimeValueType:
		return "TimeValue"
	case MaxType:
		return "Max"
	default:
		return "InvalidBaseType"
	}
}
